=====================================================================
How to get current date?
    import java.util.Date;
    import java.text.DateFormat;
    import java.text.SimpleDateFormat;

    private String getDateTime() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();
        return dateFormat.format(date);
    }
    
=====================================================================
jdbc set values to null 

	PreparedStatement pstmt...

      pstmt.setNull(2, java.sql.Types.VARCHAR);
      pstmt.setNull(3, java.sql.Types.INTEGER);
      
=====================================================================
Apromore modules deployment. 

apromore.properties file in Apromore-portal/WEB-INF/classes

- On winbox, apromore.properties must be:
Host = http://131.181.206.10:8080/
OryxEndPoint_xpdl = oryx/openFromApromore?
OryxEndPoint_epml = oryx/openFromApromore?
tmpPath=

- On brahms0, apromore.properties must be:
Host = http://brahms0.imag.fr:8080/
OryxEndPoint_xpdl = oryx/openFromApromore?
OryxEndPoint_epml = oryx/openFromApromore?
tmpPath= /tmp/

===============================================================================
PermGen error: add the following in tomcat6.conf (in /etc/tomcat6 with linux)

# attempt by MCF to add more memory (PermGen error)
JAVA_OPTS="-XX:MaxPermSize=2048M"

==============================================================================
Marshalling:

				Canonical2XPDL canonical2xpdl = new Canonical2XPDL (cpf, null, null);
				jc = JAXBContext.newInstance("org.wfmc._2008.xpdl2");
                Marshaller m = jc.createMarshaller();
                m.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE );
                JAXBElement<PackageType> rootxpdl = new org.wfmc._2008.xpdl2.ObjectFactory().createPackage(canonical2xpdl.getXpdl());
                ByteArrayOutputStream xpdl_xml = new ByteArrayOutputStream();
                m.marshal(rootxpdl, xpdl_xml);
                InputStream xpdl_xml_is = new ByteArrayInputStream(xpdl_xml.toByteArray());
                
=========================================================================

Umarshalling

			JAXBContext jc = JAXBContext.newInstance("org.apromore.cpf");
			Unmarshaller u = jc.createUnmarshaller();
			JAXBElement<CanonicalProcessType> rootElement = (JAXBElement<CanonicalProcessType>) u.unmarshal(cpf_xml);
			CanonicalProcessType cpf = rootElement.getValue();
                
=========================================================================

Modify operation(s) of a service (e.g. service_portal in module manager)

- Modify manager_portal.wsdl
- Generate service stub (Generate java bean skeleton): accept default values
- If dates involved in model_portal: change XmlGregorian.. with Date (java.util.Date)
- Generate client :
	- 

==================================================================================	
Retrieve an attachment

			DataHandler handler = payload.getProcessDescription();
			InputStream is = handler.getInputStream();
			
================================================================================
Make an attachment

			DataSource sourceCpf = new ByteArrayDataSource(canonical, "text/xml"); 
			res.setCpf(new DataHandler(sourceCpf));	
			
==================================================================
Execute an external command of the OS			
			
			Process p = Runtime.getRuntime().exec("pwd");
	        String s = null;
            BufferedReader stdInput = new BufferedReader(new
                 InputStreamReader(p.getInputStream()));

            BufferedReader stdError = new BufferedReader(new
                 InputStreamReader(p.getErrorStream()));

            p.destroy();

            // read the output from the command
           
            System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }				
            
 =====================================================================
 Print an Inputstream (native_is)
 
 System.out.println("oooooooooooooooooooooo");
			String line = null;
			BufferedReader reader = new BufferedReader(new InputStreamReader(native_is, "UTF-8"));
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
			}
			native_is.reset(); // so native_is can be reused...
			
 =====================================================================
 Copy InputStream in a file
 
 		//write the inputStream to a FileOutputStream
		OutputStream out = new FileOutputStream(new File("c:\\newfile.xml"));
 
		int read=0;
		byte[] bytes = new byte[1024];
 
		while((read = inputStream.read(bytes))!= -1){
			out.write(bytes, 0, read);
		}
 
		inputStream.close();
		out.flush();
		out.close();	
==============================================================================
Stream to string

			String line = null;
			StringBuilder sb0 = new StringBuilder();
			BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
			while ((line = reader.readLine()) != null) {
				sb0.append(line).append("\n");
			}
			return sb0.toString().trim();
			
			better version:
	
	/**
	 * creates a String representing the content of the stream
	 * @param is
	 * @return
	 * @throws IOException
	 */
    private String convertStreamToString(InputStream is) throws IOException {

    	if (is != null) {
            StringBuilder sb = new StringBuilder();
            String line;

            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                while ((line = reader.readLine()) != null) {
                    sb.append(line).append("\n");
                }
            } finally {
                is.close();
            }
            return sb.toString();
        } else {        
            return "";
        }
    }
================================================================================

Playing around with styles

- Each setStyle is applied on a component, the all style definition, whose part given as the
parameter is overrided, is applied.

===================================================================================
How do I read files in a zip archive?

package org.kodejava.sample.java.util;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;

public class ZipFileSample {
    public static void main(String[] args)   {
        try {
            // Create an instance of ZipFile to read a zip file
            // called sample.zip
            ZipFile zip = new ZipFile(new File("sample.zip"));

            // Here we start to iterate each entries inside
            // sample.zip
            for (Enumeration e = zip.entries(); e.hasMoreElements();)
            {
                // Get ZipEntry which is a file or a directory
                ZipEntry entry = (ZipEntry) e.nextElement();
                // Get some information about the entry such as
                // file name, its size.
                System.out.println("File name: " + entry.getName()
                        + "; size: " + entry.getSize() 
                        + "; compressed size: "
                        + entry.getCompressedSize());

                // Now we want to get the content of this entry.
                // Get the InputStream, we read through the input
                // stream until all the content is read.
                InputStream is = zip.getInputStream(entry);
                InputStreamReader isr = new InputStreamReader(is);

                char[] buffer = new char[1024];
                while (isr.read(buffer, 0, buffer.length) != -1)
                {
                    String s = new String(buffer);
                    // Here we just print out what is inside the
                    // buffer.
                    System.out.println(s.trim());
                }
            }
        } catch (ZipException e)
        {
            e.printStackTrace();
        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }
}
=======================================================================================
java memory error (PermGen space) 
see: http://www.eukhost.com/forums/f33/tomcat-java-lang-outofmemoryerror-permgen-space-7675/


add the following in $CATALINA_HOME/bin/catalina.sh

JAVA_OPTS="-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC"
